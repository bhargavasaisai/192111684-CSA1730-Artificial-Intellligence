import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_winner(board, player):
    # Check rows and columns
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True

    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(board[i][j] != " " for i in range(3) for j in range(3))

def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def evaluate(board):
    if is_winner(board, "X"):
        return 1
    elif is_winner(board, "O"):
        return -1
    elif is_board_full(board):
        return 0
    else:
        return None

def minimax(board, depth, maximizing_player):
    result = evaluate(board)

    if result is not None:
        return result

    if maximizing_player:
        max_eval = -math.inf
        for move in get_available_moves(board):
            i, j = move
            board[i][j] = "X"
            eval = minimax(board, depth + 1, False)
            board[i][j] = " "  # Undo the move
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves(board):
            i, j = move
            board[i][j] = "O"
            eval = minimax(board, depth + 1, True)
            board[i][j] = " "  # Undo the move
            min_eval = min(min_eval, eval)
        return min_eval

def get_best_move(board):
    best_eval = -math.inf
    best_move = None

    for move in get_available_moves(board):
        i, j = move
        board[i][j] = "X"
        eval = minimax(board, 0, False)
        board[i][j] = " "  # Undo the move

        if eval > best_eval:
            best_eval = eval
            best_move = move

    return best_move

if __name__ == "__main__":
    board = [[" " for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        if is_board_full(board):
            print("It's a draw!")
            break

        player_move = tuple(map(int, input("Enter your move (row, col): ").split()))
        player_move = (player_move[0] - 1, player_move[1] - 1)  # Adjust indices

        if 0 <= player_move[0] < 3 and 0 <= player_move[1] < 3 and board[player_move[0]][player_move[1]] == " ":
            board[player_move[0]][player_move[1]] = "O"
        else:
            print("Invalid move. Try again.")
            continue

        if is_winner(board, "O"):
            print_board(board)
            print("You win!")
            break

        if is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break

        print("AI is making a move...")
        ai_move = get_best_move(board)
        board[ai_move[0]][ai_move[1]] = "X"

        if is_winner(board, "X"):
            print_board(board)
            print("AI wins!")
            break
