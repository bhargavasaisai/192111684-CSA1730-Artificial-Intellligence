import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size)
        self.bias_hidden = np.zeros((1, self.hidden_size))
        self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size)
        self.bias_output = np.zeros((1, self.output_size))

    def forward(self, inputs):
        # Input to hidden layer
        self.hidden_layer_activation = np.dot(inputs, self.weights_input_hidden) + self.bias_hidden
        self.hidden_layer_output = sigmoid(self.hidden_layer_activation)

        # Hidden to output layer
        self.output_layer_activation = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
        self.output_layer_output = sigmoid(self.output_layer_activation)

        return self.output_layer_output

    def backward(self, inputs, targets, learning_rate):
        # Calculate the loss
        output_error = targets - self.output_layer_output

        # Backpropagation for the output layer
        output_delta = output_error * sigmoid_derivative(self.output_layer_output)
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_layer_output)

        # Update weights and biases
        self.weights_hidden_output += self.hidden_layer_output.T.dot(output_delta) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate

    def train(self, inputs, targets, epochs, learning_rate):
        for epoch in range(epochs):
            for i in range(len(inputs)):
                input_data = np.array([inputs[i]])
                target_data = np.array([targets[i]])

                # Forward pass
                output = self.forward(input_data)

                # Backward pass
                self.backward(input_data, target_data, learning_rate)

            if epoch % 100 == 0:
                loss = np.mean(np.square(targets - self.forward(inputs)))
                print(f"Epoch {epoch}, Loss: {loss:.4f}")

    def predict(self, inputs):
        return self.forward(inputs)

# Example usage with the XOR problem
if __name__ == "__main__":
    # XOR inputs and corresponding targets
    xor_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    xor_targets = np.array([[0], [1], [1], [0]])

    # Create a neural network with 2 input neurons, 2 hidden neurons, and 1 output neuron
    neural_network = NeuralNetwork(input_size=2, hidden_size=2, output_size=1)

    # Train the neural network
    neural_network.train(xor_inputs, xor_targets, epochs=10000, learning_rate=0.1)

    # Test the trained model
    test_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    predictions = neural_network.predict(test_inputs)

    print("\nPredictions:")
    for i in range(len(test_inputs)):
        print(f"Input: {test_inputs[i]}, Prediction: {predictions[i][0]:.4f}")
