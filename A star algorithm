import heapq

def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

def astar(graph, start, goal):
    priority_queue = [(heuristic(start, goal), start)]
    visited = set()

    while priority_queue:
        _, current_node = heapq.heappop(priority_queue)

        if current_node == goal:
            return True

        if current_node in visited:
            continue

        visited.add(current_node)

        for neighbor in graph[current_node]:
            heapq.heappush(priority_queue, (heuristic(neighbor, goal), neighbor))

    return False

def get_graph_from_user():
    graph = {}
    num_nodes = int(input("Enter the number of nodes: "))

    for _ in range(num_nodes):
        node = tuple(map(int, input("Enter the coordinates of the node (format: x y): ").split()))
        num_neighbors = int(input("Enter the number of neighbors for node {}: ".format(node)))

        neighbors = []
        for _ in range(num_neighbors):
            neighbor = tuple(map(int, input("Enter the coordinates of a neighbor: ").split()))
            neighbors.append(neighbor)
        graph[node] = neighbors

    return graph

def get_start_and_goal_from_user():
    start = tuple(map(int, input("Enter the coordinates of the start node (format: x y): ").split()))
    goal = tuple(map(int, input("Enter the coordinates of the goal node (format: x y): ").split()))

    return start, goal

if __name__ == "__main__":
    graph = get_graph_from_user()
    start, goal = get_start_and_goal_from_user()

    if astar(graph, start, goal):
        print("Path found from {} to {}: Yes".format(start, goal))
    else:
        print("Path found from {} to {}: No".format(start, goal))
